# =============================================================================
# WhisperLive ビルド自動化ワークフロー
# 
# このワークフローは、タグ（v*）がプッシュされたときに自動的に実行され、
# Windows、Linuxの各プラットフォーム用の実行ファイルをビルドします。
# =============================================================================

name: Build WhisperLive

# ワークフローのトリガー設定
on:
  push:
    tags:
      - 'v*' # タグがプッシュされたときにビルドを開始（例: v1.0.0, v2.1.1など）

jobs:
  # =============================================================================
  # ビルドジョブ：各OSでのビルドを行います
  # =============================================================================
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # 一つのOSでビルドが失敗しても他のOSのビルドは続行
      matrix:
        os: [windows-latest, ubuntu-latest]
        include:
          # Windows向けビルド設定
          - os: windows-latest
            artifact_name: WhisperLive.exe
            asset_name: WhisperLive-Windows.exe
          # Linux向けビルド設定
          - os: ubuntu-latest
            artifact_name: WhisperLive
            asset_name: WhisperLive-Linux

    steps:
    # リポジトリのチェックアウト
    - uses: actions/checkout@v2
      
    # Pythonのセットアップ
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9' # 使用するPythonのバージョンを指定
        
    # 依存パッケージのインストール
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller # 実行ファイル作成ツール
        pip install -r requirements.txt # プロジェクト依存パッケージ

    # Linux特有の依存関係をインストール
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev python3-dev # 音声処理に必要なライブラリ

    # PyInstallerを使って実行ファイルをビルド
    - name: Build with PyInstaller
      run: |
        python -m PyInstaller --name WhisperLive --onefile --windowed gui.py

    # ビルドされた成果物をアップロード
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.asset_name }}
        path: dist/${{ matrix.artifact_name }}

  # =============================================================================
  # リリース作成ジョブ：リリースページを作成します
  # =============================================================================
  create_release:
    name: Create Release
    needs: build # ビルドジョブが完了したら実行
    runs-on: ubuntu-latest
    steps:
      # GitHubリリースを作成
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHubが自動生成するトークン
        with:
          tag_name: ${{ github.ref }} # プッシュされたタグ名
          release_name: WhisperLive ${{ github.ref }} # リリース名
          draft: true # 下書きとして作成（手動で公開する必要あり）
          prerelease: false # 正式リリースとしてマーク
          
      # リリースURLをログに出力
      - name: Output Release URL
        run: echo 'Release URL: ${{ steps.create_release.outputs.upload_url }}'
        
      # リリースURLを次のジョブで使用するためにファイルに保存
      - name: Store release url
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
        
      # リリースURLをアーティファクトとしてアップロード
      - name: Upload release url
        uses: actions/upload-artifact@v2
        with:
          name: release_url
          path: release_url.txt

  # =============================================================================
  # アセットアップロードジョブ：ビルド成果物をリリースにアップロードします
  # =============================================================================
  upload_assets:
    name: Upload Assets
    needs: create_release # リリース作成ジョブが完了したら実行
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Windows用実行ファイル
          - artifact_name: WhisperLive-Windows.exe
            asset_name: WhisperLive-Windows.exe
            asset_content_type: application/octet-stream
          # Linux用実行ファイル
          - artifact_name: WhisperLive-Linux
            asset_name: WhisperLive-Linux
            asset_content_type: application/octet-stream
    
    steps:
      # 前のジョブで保存したリリースURLをダウンロード
      - name: Download release url
        uses: actions/download-artifact@v2
        with:
          name: release_url
          
      # リリースURLを環境変数に設定（修正版：OSに依存しない書き方）
      - name: Get release file
        id: get_release_info
        shell: bash
        run: |
          value=`cat release_url.txt`
          echo "upload_url=$value" >> $GITHUB_OUTPUT
      
      # ビルド成果物をダウンロード
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.artifact_name }}
          
      # 成果物をリリースにアセットとしてアップロード
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHubトークン
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }} # リリースのアップロードURL
          asset_path: ${{ matrix.asset_name }} # アップロードするファイルのパス
          asset_name: ${{ matrix.asset_name }} # リリースページでの表示名
          asset_content_type: ${{ matrix.asset_content_type }} # ファイルのMIMEタイプ
