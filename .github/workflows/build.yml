# =============================================================================
# WhisperLive ビルド自動化ワークフロー
# 
# このワークフローは、タグ（v*）がプッシュされたときに自動的に実行され、
# Windows、Linuxの各プラットフォーム用の実行ファイルをビルドします。
# =============================================================================

name: Build WhisperLive

# ワークフローのトリガー設定
on:
  push:
    tags:
      - 'v*' # タグがプッシュされたときにビルドを開始（例: v1.0.0, v2.1.1など）

jobs:
  # =============================================================================
  # ビルドジョブ：各OSでのビルドを行います
  # =============================================================================
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # 一つのOSでビルドが失敗しても他のOSのビルドは続行
      matrix:
        os: [windows-latest, ubuntu-latest]
        include:
          # Windows向けビルド設定
          - os: windows-latest
            artifact_name: WhisperLive.exe
            asset_name: WhisperLive-Windows.exe
          # Linux向けビルド設定
          - os: ubuntu-latest
            artifact_name: WhisperLive
            asset_name: WhisperLive-Linux

    steps:
    # リポジトリのチェックアウト
    - uses: actions/checkout@v4
      
    # Pythonのセットアップ
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9' # 使用するPythonのバージョンを指定
        
    # Linux特有の依存関係をインストール
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev python3-dev ffmpeg
        # PyAudioをビルドするためにPKG_CONFIG_PATHを設定
        echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig" >> $GITHUB_ENV

    # 依存パッケージのインストール
    - name: Install dependencies
      shell: bash # 明示的にbashを指定
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller # 実行ファイル作成ツール
        
        # OS固有の依存関係インストール
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          # Linuxではportaudio関連の問題を回避するためpipでpyaudioをインストールする前にaptで必要なパッケージを確実にインストール
          pip install numpy requests pydub
          pip install --no-binary=pyaudio pyaudio
        else
          pip install -r requirements.txt
        fi

    # Windows用の依存関係インストール（PowerShell構文）
    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        pip install -r requirements.txt

    # PyInstallerを使って実行ファイルをビルド
    - name: Build with PyInstaller
      run: |
        python -m PyInstaller --name WhisperLive --onefile --windowed gui.py

    # ビルドされた成果物をアップロード
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: dist/${{ matrix.artifact_name }}

  # =============================================================================
  # リリース作成ジョブ：リリースページを作成します
  # =============================================================================
  create_release:
    name: Create Release
    needs: build # ビルドジョブが完了したら実行
    runs-on: ubuntu-latest
    permissions:
      contents: write # リリース作成に必要な権限
    steps:
      # リポジトリのチェックアウト（タグ情報を取得するため）
      - uses: actions/checkout@v4
      
      # GitHubリリースを作成（自動リリースノート付き）
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: WhisperLive ${{ github.ref_name }}
          draft: true # 下書きとして作成（手動で公開する必要あり）
          prerelease: false # 正式リリースとしてマーク
          generate_release_notes: true # GitHub Actions が自動でリリースノートを生成
          body: |
            # WhisperLive ${{ github.ref_name }} リリース
            
            このリリースには、Windows および Linux 用のビルド済み実行ファイルが含まれています。
            
            ## ダウンロード方法
            - Windows ユーザー: `WhisperLive-Windows.exe` をダウンロードしてください
            - Linux ユーザー: `WhisperLive-Linux` をダウンロードして実行権限を付与してください
            
            ## 自動生成されたリリースノート
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # リリースIDを次のジョブで使用するためにファイルに保存
      - name: Store release ID
        run: echo "${{ steps.create_release.outputs.id }}" > release_id.txt
        
      # リリースIDをアーティファクトとしてアップロード
      - name: Upload release ID
        uses: actions/upload-artifact@v4
        with:
          name: release_id
          path: release_id.txt

  # =============================================================================
  # アセットアップロードジョブ：ビルド成果物をリリースにアップロードします
  # =============================================================================
  upload_assets:
    name: Upload Assets
    needs: create_release # リリース作成ジョブが完了したら実行
    runs-on: ubuntu-latest
    permissions:
      contents: write # アセットアップロードに必要な権限
    strategy:
      matrix:
        include:
          # Windows用実行ファイル
          - artifact_name: WhisperLive-Windows.exe
            asset_name: WhisperLive-Windows.exe
          # Linux用実行ファイル
          - artifact_name: WhisperLive-Linux
            asset_name: WhisperLive-Linux
    
    steps:
      # リポジトリのチェックアウト
      - uses: actions/checkout@v4
      
      # 前のジョブで保存したリリースIDをダウンロード
      - name: Download release ID
        uses: actions/download-artifact@v4
        with:
          name: release_id
          
      # リリースIDを取得
      - name: Get release ID
        id: get_release_info
        shell: bash
        run: |
          value=`cat release_id.txt`
          echo "release_id=$value" >> $GITHUB_OUTPUT
          
      # ビルド成果物をダウンロード - 出力パスを短くする
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ./
          
      # ビルドファイルをリネーム（必要に応じて）
      - name: Rename files if needed
        shell: bash
        run: |
          echo "ダウンロードしたファイル:"
          ls -la
          
          if [ -f "WhisperLive.exe" ] && [ "${{ matrix.asset_name }}" = "WhisperLive-Windows.exe" ]; then
            mv WhisperLive.exe ${{ matrix.asset_name }}
            echo "Windowsファイルをリネームしました"
          fi
          
          if [ -f "WhisperLive" ] && [ "${{ matrix.asset_name }}" = "WhisperLive-Linux" ]; then
            mv WhisperLive ${{ matrix.asset_name }}
            echo "Linuxファイルをリネームしました"
          fi
          
          echo "リネーム後のファイル一覧:"
          ls -la
          
      # 成果物の存在確認とデバッグ
      - name: List downloaded artifacts
        shell: bash
        run: |
          echo "現在のディレクトリ:"
          pwd
          echo "ダウンロードされた成果物:"
          find . -type f -maxdepth 1 | sort
          echo "ファイル詳細:"
          ls -la
          
      # ファイルに実行権限を付与（Linux用）
      - name: Set executable permission for Linux
        if: endsWith(matrix.asset_name, '-Linux')
        shell: bash
        run: |
          chmod +x ${{ matrix.asset_name }}
          echo "権限を設定したファイル:"
          ls -la ${{ matrix.asset_name }}

      # 成果物をリリースにアセットとして追加（修正版）
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: ${{ matrix.asset_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
