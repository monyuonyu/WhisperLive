name: Build WhisperLive

on:
  push:
    tags:
      - 'v*' # タグがプッシュされたときにビルドを開始

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            artifact_name: WhisperLive.exe
            asset_name: WhisperLive-Windows.exe
          - os: macos-latest
            artifact_name: WhisperLive
            asset_name: WhisperLive-macOS
          - os: ubuntu-latest
            artifact_name: WhisperLive
            asset_name: WhisperLive-Linux

    steps:
    - uses: actions/checkout@v2
      
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt

    # Linuxの場合、追加の依存関係をインストール
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev python3-dev

    # PyInstallerでビルド
    - name: Build with PyInstaller
      run: |
        python -m PyInstaller --name WhisperLive --onefile --windowed gui.py

    # 成果物をアップロード
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.asset_name }}
        path: dist/${{ matrix.artifact_name }}

  # リリース作成
  create_release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: WhisperLive ${{ github.ref }}
          draft: true
          prerelease: false
          
      # リリースURLを出力
      - name: Output Release URL
        run: echo "Release URL: ${{ steps.create_release.outputs.upload_url }}"
        
      # リリースURLを次のジョブに渡す
      - name: Store release url
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
        
      - name: Upload release url
        uses: actions/upload-artifact@v2
        with:
          name: release_url
          path: release_url.txt

  # 成果物をリリースに追加
  upload_assets:
    name: Upload Assets
    needs: create_release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - artifact_name: WhisperLive-Windows.exe
            asset_name: WhisperLive-Windows.exe
            asset_content_type: application/octet-stream
          - artifact_name: WhisperLive-macOS
            asset_name: WhisperLive-macOS
            asset_content_type: application/octet-stream
          - artifact_name: WhisperLive-Linux
            asset_name: WhisperLive-Linux
            asset_content_type: application/octet-stream
    
    steps:
      # リリースURLをダウンロード
      - name: Download release url
        uses: actions/download-artifact@v2
        with:
          name: release_url
          
      - name: Get release file
        id: get_release_info
        run: |
          echo "::set-output name=upload_url::$(cat release_url.txt)"
      
      # 成果物をダウンロード
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.artifact_name }}
          
      # 成果物をリリースにアップロード
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ${{ matrix.asset_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: ${{ matrix.asset_content_type }}
